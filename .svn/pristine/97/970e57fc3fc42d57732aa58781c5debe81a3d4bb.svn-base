<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
		http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	
	<context:component-scan base-package="com.sys.service,com.basic.service,com.sys.controller,com.basic.controller,com.common.basedb" />
	
	<!-- 加载属性文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
       <property name ="locations">  
           <list>  
                 <value>classpath:dbconfig.properties </value>  
            </list>  
        </property>  
    </bean>

    <!-- 阿里 druid 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">  
         <!-- 数据库基本信息配置 -->
         <property name = "url" value="${jdbc.url}" />  
         <property name = "username" value="${jdbc.username}" />  
         <property name = "password" value="${jdbc.password}" />  
         <property name = "driverClassName" value="${jdbc.driverClassName}" />  
         <property name = "filters" value="${filters}" />  
          <!-- 最大并发连接数 -->
         <property name = "maxActive" value="${maxActive}" />
         <!-- 初始化连接数量 -->
         <property name = "initialSize" value="${initialSize}" />
         <!-- 配置获取连接等待超时的时间 -->
         <property name = "maxWait" value = "${maxWait}" />
         <!-- 最小空闲连接数 -->
         <property name = "minIdle" value = "${minIdle}" />  
         <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
         <property name = "timeBetweenEvictionRunsMillis" value ="${timeBetweenEvictionRunsMillis}" />
         <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
         <property name = "minEvictableIdleTimeMillis" value ="${minEvictableIdleTimeMillis}" />  
         <property name = "validationQuery" value = "${validationQuery}" />  
         <property name = "testWhileIdle" value = "${testWhileIdle}" />  
         <property name = "testOnBorrow" value = "${testOnBorrow}" />  
         <property name = "testOnReturn" value = "${testOnReturn}" />  
         <property name = "maxOpenPreparedStatements" value ="${maxOpenPreparedStatements}" />
         <!-- 打开 removeAbandoned 功能 -->
         <property name = "removeAbandoned" value = "${removeAbandoned}" />
         <!-- 1800 秒，也就是 30 分钟 -->
         <property name = "removeAbandonedTimeout" value ="${removeAbandonedTimeout}" />
         <!-- 关闭 abanded 连接时输出错误日志 -->   
         <property name = "logAbandoned" value = "${logAbandoned}" />
    </bean>
    
    <!--3：配置SqlSessionFactory对象-->
    <!-- 配置mybatis的sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
        <!--配置mybatis全局配置文件：mybatis-config.xml-->
        <property name="configLocation" value="classpath:mybatis-configs.xml"/>
        <!--扫描entity包 使用别名-->
        <!-- <property name="typeAliasesPackage" value="org.seckill.entity"/> -->
        <!--扫面sql配置文件，也就是mapper需要的xml文件-->
        <property name="mapperLocations">
        	<list>
                <value>classpath:com/basic/mapping/*.xml</value>
                <value>classpath:com/sys/mapping/*.xml</value>
               <!-- <value>classpath*:com/*/mapping/*.xml</value> -->
            </list>
        </property>
    </bean>

    <!--4：配置扫面dao接口包，动态实现dao接口并注入到spring容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入sqlSession的过程-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--给出扫描dao接口包-->
        <property name="basePackage" value="com.*.dao"/>
    </bean>
    
    <!-- 注入MyBatis SqlSessionTemplate模板,相当于Hibernate中的HibernatTemplate-->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<!-- 通过构造方法注入，SqlSessionTemplate中没有sqlSessionFactory属性的set方法，所以只能通过构造方法注入 -->
		<!-- 第一种方式,根据方法参数名注入 -->
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
		<!-- 第二种方式,根据构造方法参数索引注入-->
		<!-- <constructor-arg index="0" ref="sqlSessionFactory"/> -->
		 
	</bean>
    <!-- 配置事务管理 -->  
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >       
         <property name="dataSource" ref="dataSource"></property>  
    </bean>
     <!-- 注册事务管理器 -->
     <tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- 启用annotation -->
	<mvc:annotation-driven>
		<!-- 消息转换器 -->
		<!-- 解决@ResponseBody中文乱码 -->
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes" value="text/html;charset=UTF-8" />
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" />
	
	<!-- 资源拦截 -->
	<mvc:resources location="/" mapping="/**/*.js"/>  
	<mvc:resources location="/" mapping="/**/*/.js"/>  
	<mvc:resources location="/" mapping="/**/*.css"/>  
	<mvc:resources location="/images/" mapping="/images/*" cache-period="360000"/>
	
	<mvc:interceptors>
	    <mvc:interceptor>
	        <mvc:mapping path="/**"/>
	        <mvc:exclude-mapping path="/**/fonts/*"/>
	        <mvc:exclude-mapping path="/**/*.css"/>
	        <mvc:exclude-mapping path="/**/*.js"/>
	        <mvc:exclude-mapping path="/**/*.png"/>
	        <mvc:exclude-mapping path="/**/*.gif"/>
	        <mvc:exclude-mapping path="/**/*.jpg"/>
	        <mvc:exclude-mapping path="/**/*.jpeg"/>
	        <mvc:exclude-mapping path="/**/*login*"/>
	        <mvc:exclude-mapping path="/**/*Login*"/>
	        <mvc:exclude-mapping path="/index.html"/>
	        <mvc:exclude-mapping path="/userController/userlogin.do"/>
	        
	        <bean class="com.common.filter.BaseInterceptor"></bean>
	    </mvc:interceptor>
	</mvc:interceptors>
	
	
	<!-- 定时任务 -->
	<!-- 一个类里两个定时任务 配置你要定时加载的目标类 -->
	<bean id="myJobA" class="com.common.task.TaskManager" /> 
	<bean id="myJobDetailA" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="myJobA">
        </property>
        <property name="targetMethod" value="work"></property>
        <property name="concurrent" value="false" />
        <!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
    </bean> 
    <!-- 定义时间间隔触发器 -->  
    <bean id="myTriggersA" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="myJobDetailA">
        </property>
        <property name="cronExpression">
            <value>*/5 * * * * ?</value>
        </property>
    </bean>
      <!-- 启动定时器 -->  
    <bean id="myScheduler"
        class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="myTriggersA"></ref>
                <!-- <ref bean="myTriggersB"></ref> -->
            </list>
        </property>
        <property name="autoStartup" value="false"></property>
    </bean>
</beans>